# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities

import parser_pb2 as parser__pb2


class TwitterTextStub(object):
  """This is the service for our API
  This is where we define the methods in this service
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Parse = channel.unary_unary(
        '/twittertext.TwitterText/Parse',
        request_serializer=parser__pb2.TweetRequest.SerializeToString,
        response_deserializer=parser__pb2.ParsedResponse.FromString,
        )


class TwitterTextServicer(object):
  """This is the service for our API
  This is where we define the methods in this service
  """

  def Parse(self, request, context):
    """We have a mehtod called 'Parse' which takes
    parameter called 'TweetRequest' and returns
    the message 'ParsedResponse'
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_TwitterTextServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Parse': grpc.unary_unary_rpc_method_handler(
          servicer.Parse,
          request_deserializer=parser__pb2.TweetRequest.FromString,
          response_serializer=parser__pb2.ParsedResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'twittertext.TwitterText', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
